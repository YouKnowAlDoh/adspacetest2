<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TokenAd Board - Premium Advertisement Space</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Times New Roman', serif;
            background: #ffffff;
            color: #000000;
            line-height: 1.4;
            height: 100vh;
            overflow: hidden;
        }

        .header {
            background: #000000;
            color: #ffffff;
            padding: 1rem;
            border-bottom: 3px solid #000000;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: relative;
            z-index: 1000;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: bold;
            letter-spacing: 2px;
        }

        .wallet-section {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .wallet-button {
            background: #ffffff;
            color: #000000;
            border: 2px solid #ffffff;
            padding: 0.5rem 1rem;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }

        .wallet-button:hover {
            background: #f0f0f0;
        }

        .wallet-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .wallet-info {
            font-size: 0.8rem;
            color: #cccccc;
        }

        .main-content {
            height: calc(100vh - 80px);
            display: grid;
            grid-template-areas: 
                "hero hero hero"
                "large medium1 medium2"
                "small1 small2 small3";
            grid-template-rows: 1fr 1fr 1fr;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 1px;
            background: #000000;
            padding: 1px;
        }

        .ad-slot {
            background: #ffffff;
            border: 1px solid #000000;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }

        .ad-slot.hero {
            grid-area: hero;
            font-size: 2rem;
        }

        .ad-slot.large {
            grid-area: large;
            font-size: 1.5rem;
        }

        .ad-slot.medium {
            font-size: 1.2rem;
        }

        .ad-slot.medium:nth-of-type(3) {
            grid-area: medium1;
        }

        .ad-slot.medium:nth-of-type(4) {
            grid-area: medium2;
        }

        .ad-slot.small {
            font-size: 1rem;
        }

        .ad-slot.small:nth-of-type(5) {
            grid-area: small1;
        }

        .ad-slot.small:nth-of-type(6) {
            grid-area: small2;
        }

        .ad-slot.small:nth-of-type(7) {
            grid-area: small3;
        }

        .ad-content {
            text-align: center;
            padding: 1rem;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
        }

        .ad-image {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }

        .placeholder {
            color: #666666;
            font-style: italic;
            text-align: center;
        }

        .upload-area {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #ffffff;
            border: 3px solid #000000;
            padding: 2rem;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            z-index: 2000;
            display: none;
            text-align: center;
            max-width: 90vw;
            max-height: 90vh;
        }

        .upload-area.active {
            display: block;
        }

        .upload-button {
            background: #000000;
            color: #ffffff;
            border: none;
            padding: 1rem 2rem;
            cursor: pointer;
            font-weight: bold;
            margin: 0.5rem;
            transition: all 0.3s ease;
        }

        .upload-button:hover {
            background: #333333;
        }

        .file-input {
            margin: 1rem 0;
            padding: 0.5rem;
            border: 1px solid #000000;
            width: 100%;
        }

        .close-button {
            position: absolute;
            top: 10px;
            right: 15px;
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            font-weight: bold;
        }

        .status-message {
            margin: 0.5rem 0;
            padding: 0.5rem;
            border-radius: 3px;
        }

        .success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .warning {
            background: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                gap: 0.5rem;
                padding: 0.8rem;
            }

            .logo {
                font-size: 1.4rem;
            }

            .wallet-section {
                flex-direction: column;
                gap: 0.5rem;
            }

            .main-content {
                height: calc(100vh - 120px);
                grid-template-areas: 
                    "hero hero"
                    "large large"
                    "medium1 medium2"
                    "small1 small2"
                    "small3 small3";
                grid-template-rows: 1fr 1fr 1fr 1fr 0.5fr;
                grid-template-columns: 1fr 1fr;
            }

            .ad-slot.hero {
                font-size: 1.5rem;
            }

            .ad-slot.large {
                font-size: 1.2rem;
            }

            .upload-area {
                padding: 1rem;
                margin: 1rem;
            }
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.7);
            z-index: 1500;
            display: none;
        }

        .overlay.active {
            display: block;
        }

        .token-info {
            font-size: 0.7rem;
            color: #cccccc;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">TOKENAD BOARD</div>
        <div class="wallet-section">
            <div class="token-info" id="tokenInfo">TOKEN HOLDERS ONLY</div>
            <div class="wallet-info" id="walletInfo">Connect Wallet to Advertise</div>
            <button class="wallet-button" id="connectWallet">Connect Wallet</button>
        </div>
    </div>

    <div class="main-content" id="adBoard">
        <div class="ad-slot hero" data-min-percentage="10" onclick="handleAdClick(this)">
            <div class="ad-content">
                <div class="placeholder">Premium Space<br>10%+ Holdings Required</div>
            </div>
        </div>
        
        <div class="ad-slot large" data-min-percentage="5" onclick="handleAdClick(this)">
            <div class="ad-content">
                <div class="placeholder">Large Ad Space<br>5%+ Holdings Required</div>
            </div>
        </div>
        
        <div class="ad-slot medium" data-min-percentage="2.5" onclick="handleAdClick(this)">
            <div class="ad-content">
                <div class="placeholder">Medium Space<br>2.5%+ Holdings</div>
            </div>
        </div>
        
        <div class="ad-slot medium" data-min-percentage="2.5" onclick="handleAdClick(this)">
            <div class="ad-content">
                <div class="placeholder">Medium Space<br>2.5%+ Holdings</div>
            </div>
        </div>
        
        <div class="ad-slot small" data-min-percentage="1" onclick="handleAdClick(this)">
            <div class="ad-content">
                <div class="placeholder">Small Space<br>1%+ Holdings</div>
            </div>
        </div>
        
        <div class="ad-slot small" data-min-percentage="1" onclick="handleAdClick(this)">
            <div class="ad-content">
                <div class="placeholder">Small Space<br>1%+ Holdings</div>
            </div>
        </div>
        
        <div class="ad-slot small" data-min-percentage="0.5" onclick="handleAdClick(this)">
            <div class="ad-content">
                <div class="placeholder">Mini Space<br>0.5%+ Holdings</div>
            </div>
        </div>
    </div>

    <div class="overlay" id="overlay"></div>
    
    <div class="upload-area" id="uploadArea">
        <button class="close-button" onclick="closeUpload()">&times;</button>
        <h2>Upload Advertisement</h2>
        <div id="statusMessage"></div>
        <p>Your holdings: <span id="userHoldings">0%</span></p>
        <p>Available ad space: <span id="availableSpace">Select an ad slot</span></p>
        <input type="file" class="file-input" id="imageInput" accept="image/*">
        <div>
            <button class="upload-button" id="uploadBtn" onclick="uploadAd()">Upload Advertisement</button>
            <button class="upload-button" onclick="closeUpload()">Cancel</button>
        </div>
    </div>

    <script>
        // Mock configuration - replace with actual values
        const CONFIG = {
            TOKEN_MINT: 'YourTokenMintAddressHere',
            RPC_ENDPOINT: 'https://api.mainnet-beta.solana.com',
            REQUIRED_NETWORK: 'mainnet-beta'
        };

        let wallet = null;
        let userTokenBalance = 0;
        let totalSupply = 1000000; // Mock total supply
        let currentAdSlot = null;
        let userHoldingPercentage = 0;

        // Mock advertisements storage
        let advertisements = {};

        // Wallet connection functions
        async function connectWallet() {
            const connectBtn = document.getElementById('connectWallet');
            const walletInfo = document.getElementById('walletInfo');
            
            try {
                connectBtn.textContent = 'Connecting...';
                connectBtn.disabled = true;

                // Check for Solana wallets
                if (window.solana && window.solana.isPhantom) {
                    wallet = window.solana;
                } else if (window.solflare && window.solflare.isSolflare) {
                    wallet = window.solflare;
                } else if (window.backpack) {
                    wallet = window.backpack;
                } else {
                    throw new Error('No supported wallet found. Please install Phantom, Solflare, or Backpack wallet.');
                }

                const resp = await wallet.connect();
                const publicKey = resp.publicKey.toString();
                
                // Mock token balance check - replace with actual RPC calls
                await checkTokenBalance(publicKey);
                
                walletInfo.textContent = `${publicKey.substring(0, 4)}...${publicKey.substring(publicKey.length - 4)}`;
                connectBtn.textContent = 'Connected';
                
                updateTokenInfo();
                showStatusMessage('Wallet connected successfully!', 'success');
                
            } catch (error) {
                console.error('Wallet connection failed:', error);
                connectBtn.textContent = 'Connect Wallet';
                connectBtn.disabled = false;
                showStatusMessage(`Connection failed: ${error.message}`, 'error');
            }
        }

        async function checkTokenBalance(publicKey) {
            // Mock implementation - replace with actual Solana RPC calls
            // This would typically involve:
            // 1. Calling getTokenAccountsByOwner
            // 2. Filtering for your specific token mint
            // 3. Getting the token balance
            
            // Mock data for demonstration
            userTokenBalance = Math.random() * 50000; // Random balance between 0-50k
            userHoldingPercentage = (userTokenBalance / totalSupply) * 100;
            
            // Simulate API delay
            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        function updateTokenInfo() {
            const tokenInfo = document.getElementById('tokenInfo');
            if (userHoldingPercentage > 0) {
                tokenInfo.textContent = `Holdings: ${userHoldingPercentage.toFixed(3)}%`;
            }
        }

        function handleAdClick(adSlot) {
            if (!wallet) {
                showStatusMessage('Please connect your wallet first', 'warning');
                return;
            }

            const minPercentage = parseFloat(adSlot.dataset.minPercentage);
            
            if (userHoldingPercentage < minPercentage) {
                showStatusMessage(`Insufficient holdings. You need ${minPercentage}% to use this ad space.`, 'error');
                return;
            }

            currentAdSlot = adSlot;
            document.getElementById('availableSpace').textContent = `${adSlot.className.split(' ')[1]} space (min ${minPercentage}%)`;
            document.getElementById('userHoldings').textContent = `${userHoldingPercentage.toFixed(3)}%`;
            
            document.getElementById('overlay').classList.add('active');
            document.getElementById('uploadArea').classList.add('active');
        }

        function closeUpload() {
            document.getElementById('overlay').classList.remove('active');
            document.getElementById('uploadArea').classList.remove('active');
            currentAdSlot = null;
            document.getElementById('imageInput').value = '';
            document.getElementById('statusMessage').innerHTML = '';
        }

        function uploadAd() {
            const fileInput = document.getElementById('imageInput');
            const file = fileInput.files[0];
            
            if (!file) {
                showStatusMessage('Please select an image file', 'error');
                return;
            }

            if (!file.type.startsWith('image/')) {
                showStatusMessage('Please select a valid image file', 'error');
                return;
            }

            if (file.size > 5 * 1024 * 1024) { // 5MB limit
                showStatusMessage('File size must be under 5MB', 'error');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                // Store the advertisement
                const slotId = Array.from(currentAdSlot.parentNode.children).indexOf(currentAdSlot);
                advertisements[slotId] = {
                    imageData: e.target.result,
                    owner: wallet.publicKey.toString(),
                    uploadTime: Date.now()
                };

                // Update the ad slot
                currentAdSlot.innerHTML = `
                    <div class="ad-content">
                        <img src="${e.target.result}" alt="Advertisement" class="ad-image">
                    </div>
                `;

                showStatusMessage('Advertisement uploaded successfully!', 'success');
                setTimeout(closeUpload, 1500);
            };
            
            reader.readAsDataURL(file);
        }

        function showStatusMessage(message, type) {
            const statusDiv = document.getElementById('statusMessage');
            statusDiv.innerHTML = `<div class="status-message ${type}">${message}</div>`;
            
            setTimeout(() => {
                statusDiv.innerHTML = '';
            }, 5000);
        }

        // Initialize wallet connection button
        document.getElementById('connectWallet').addEventListener('click', connectWallet);

        // Auto-connect if wallet is already connected
        window.addEventListener('load', async () => {
            if (window.solana && window.solana.isConnected) {
                try {
                    wallet = window.solana;
                    const publicKey = wallet.publicKey.toString();
                    await checkTokenBalance(publicKey);
                    document.getElementById('walletInfo').textContent = `${publicKey.substring(0, 4)}...${publicKey.substring(publicKey.length - 4)}`;
                    document.getElementById('connectWallet').textContent = 'Connected';
                    updateTokenInfo();
                } catch (error) {
                    console.error('Auto-connect failed:', error);
                }
            }
        });

        // Handle wallet events
        if (window.solana) {
            window.solana.on('connect', () => {
                console.log('Wallet connected');
            });

            window.solana.on('disconnect', () => {
                wallet = null;
                userTokenBalance = 0;
                userHoldingPercentage = 0;
                document.getElementById('walletInfo').textContent = 'Connect Wallet to Advertise';
                document.getElementById('connectWallet').textContent = 'Connect Wallet';
                document.getElementById('tokenInfo').textContent = 'TOKEN HOLDERS ONLY';
            });
        }
    </script>
</body>
</html>